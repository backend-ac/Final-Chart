let worldValues = [];

d3.csv("./data/AIU-All-Women-Dataset-csv.csv", d => {
	return {
		geo: d.region.replace(/\s/g, ''),
		category: d.region,
		value: +d.allpreg_abortion,
		safe_abortions: +d.safe_abortions,
		lesssafe_abortions: +d.lesssafe_abortions,
		leastsafe_abortions: +d.leastsafe_abortions,

		pct_matdeaths_abortions: +d.pct_matdeaths_abortions,
		pct_matdeaths_safeabs: +d.pct_matdeaths_safeabs,
		pct_matdeaths_unsafeabs: +d.pct_matdeaths_unsafeabs,
	}
}).then(rawData => { // Log the data to the console to check if it is correctly populated

	// Group the data by region and sum the values of allpreg_abortion
	const groupData = d3.rollup(rawData,
		v => d3.sum(v, d => d.value),
		d => d.category
	);

	const width = 500;
	const height = 310;
	const radius = Math.min(width, height) /2 ;
	const margins = {top: 10, right: 0, bottom: 100, left: 20};

	var barData = {};
	for(item in rawData ){
		if( item != 'columns' ){
			let key = rawData[item].geo;
			if(barData.hasOwnProperty(key) ){
				barData[key] = {
					geo: key,
					country: rawData[item].category,
					leastsafe_abortions: barData[key].leastsafe_abortions += rawData[item].leastsafe_abortions,
					lesssafe_abortions: barData[key].lesssafe_abortions += rawData[item].lesssafe_abortions,
					safe_abortions: barData[key].safe_abortions += rawData[item].safe_abortions,
					value: barData[key].value += rawData[item].value,

					pct_matdeaths_abortions: barData[key].pct_matdeaths_abortions += rawData[item].pct_matdeaths_abortions,
					pct_matdeaths_safeabs: barData[key].pct_matdeaths_safeabs += rawData[item].pct_matdeaths_safeabs,
					pct_matdeaths_unsafeabs: barData[key].pct_matdeaths_unsafeabs += rawData[item].pct_matdeaths_unsafeabs,
				};
			} else{
				barData[key] = {
					geo: key,
					country: rawData[item].category,
					leastsafe_abortions: rawData[item].leastsafe_abortions,
					lesssafe_abortions: rawData[item].lesssafe_abortions,
					safe_abortions: rawData[item].safe_abortions,
					value: rawData[item].value,

					pct_matdeaths_abortions: rawData[item].pct_matdeaths_abortions,
					pct_matdeaths_safeabs: rawData[item].pct_matdeaths_safeabs,
					pct_matdeaths_unsafeabs: rawData[item].pct_matdeaths_unsafeabs,
				};
			}

			let w_item = {
				name: rawData[item].country,
				value: rawData[item].pct_matdeaths_abortions
			};

			worldValues.push(w_item);
		}
	}

	let mainData = barData;
	barData = Object.values(barData);

	let w_cols = ['safe_abortions', 'lesssafe_abortions', 'leastsafe_abortions'];
	let w_cols_labels = ['Safe', 'Lesssafe', 'Leastsafe'];

	let worldData = [];
	for( key in w_cols ){
		let total_value = 0;
		for( item in barData ){
			total_value += barData[item][w_cols[key]];
		}
		worldData[key] = {
			label: w_cols_labels[key],
			value: total_value,
			col: w_cols[key]
		}
	}

	// Create a pie layout
	const pie = d3.pie()
		.sort(null)
		.value(d => d[1])
		.padAngle(0.03);

	// Set the arc generator function
	const arc = d3.arc()
		.innerRadius(0)
		.outerRadius(170);

	// Set the color scale
	const color = d3.scaleOrdinal()
		.domain(groupData.keys())
		.range(['#a5b783', '#c6cbc4', '#cfe2f3', '#619ee1', '#4451ba'])

	// Append the SVG element
	const svg = d3.select('#pie-chart')
		.append('svg')
		.attr("viewBox", [0, 10, width, height+180])
		.append('g')
		.attr('transform', `translate(${width / 2}, ${height -70})`);

	// Add the pie chart
    const paths = svg.selectAll('.arc')
		.data(pie(groupData))
		.enter()
		.append('path')
		.attr('class', d => d.data[0].replace(/\s/g, ''))
		.attr('data-item', d => d.data[0].replace(/\s/g, ''))
		.attr('d', arc)
		.attr('fill', (d, i) => color(i))
		.attr("stroke", "#000")
    .attr("stroke-width", 1)
    .style('opacity', 0.8);

	paths.append('title').text(d => Math.round(d.value));
	// Add the mouseover event listener
	paths.on("mouseover", function(d) {
		d3.select(this).style("fill", '#d6b312');
	});

	// Add the mouseout event listener
	paths.on("mouseout", function(d) {
		d3.select(this).style("fill", d.groupData);
	});

    paths.on("click", function(d) {
		let cur_item = d3.select(this).attr("data-item");
    d3.select("#region-name").text("Statistics on the number of different types of abortions in " + cur_item + " region");

		d3.selectAll('#pie-chart .active')
			.classed('active', false)
			.style('stroke-width', 1)
      .style('opacity', 0.8);

		d3.select(this).style("stroke", "#333")
    		.style("stroke-width", 2).style('opacity', 2);
    d3.select(this).classed('active', true);

    for( item in worldData ){
    	if( worldData[item].col == 'leastsafe_abortions' ){
    		worldData[item].value = mainData[cur_item].leastsafe_abortions;
    	}
    	if( worldData[item].col == 'lesssafe_abortions' ){
    		worldData[item].value = mainData[cur_item].lesssafe_abortions;
    	}
    	if( worldData[item].col == 'safe_abortions' ){
    		worldData[item].value = mainData[cur_item].safe_abortions;
    	}
    }

    const xScale = d3.scaleBand()
	    .domain(worldData.map(d => d.label))
      .range([50, 300])
	    .padding(0.2);

    const yScale = d3.scaleLinear()
	    .domain([0, d3.max(worldData, d => d.value)])
	    .range([height - margins.bottom, margins.top]);

    const t = d3.transition().duration(1000);

    bar = bar
	    .data(worldData, d => d.geo)
	    .join(
	    	enter => enter.append('rect')
	    	.attr("class", 'bar_item')
			.attr("x", d => xScale(d.label))
			.attr("y", d => yScale(d.value))
			.attr("height", 0)
			.attr("width", 50)
			.attr("fill", d => colors(d.label))
	    	.call(enter => enter.transition(t)
	    	.attr("height", d => yScale(0) - yScale(d.value))),
	    	update => update.transition(t)
	    	.attr("x", d => xScale(d.label))
			.attr("y", d => yScale(d.value))
	    	.attr("height", d => yScale(0) - yScale(d.value))
	    	.attr("width", 50),
	    	exit => exit.transition(t)
	    	.attr("y", yScale(0))
	    	.attr("height", 0)
        .remove()
	    );

	// Add the tooltip when hover on the bar
	bar.append('title').text(d => Math.round(d.value));
	bar.on("mouseover", function(d) {
		d3.select(this).style("fill", '#d6b312');
	});
	
	// Add the mouseout event listener
	bar.on("mouseout", function(d) {
		d3.select(this).style("fill", d.groupData);
	});

    const yAxis = d3.axisLeft(yScale)

    yGroup.transition(t)
	    .call(yAxis)
	    .selection()
	    .call(g => g.select(".domain"));

	});

  d3.select(document).on("click", function(event) {
    if(event.target.closest('path') == null){
      	d3.selectAll('#pie-chart .active')
			.classed('active', false)
			.style('stroke-width', 1)
      	.style('opacity', 0.8);

    	d3.select("#region-name").text("Statistics on the number of different types of abortions around the world");
	
	  	var barData = {};
	  	for(item in rawData ){
			if( item != 'columns' ){
				let key = rawData[item].geo;
				if(barData.hasOwnProperty(key) ){
					barData[key] = {
						geo: key,
						country: rawData[item].category,
						leastsafe_abortions: barData[key].leastsafe_abortions += rawData[item].leastsafe_abortions,
						lesssafe_abortions: barData[key].lesssafe_abortions += rawData[item].lesssafe_abortions,
						safe_abortions: barData[key].safe_abortions += rawData[item].safe_abortions,
						value: barData[key].value += rawData[item].value,

						pct_matdeaths_abortions: barData[key].pct_matdeaths_abortions += rawData[item].pct_matdeaths_abortions,
						pct_matdeaths_safeabs: barData[key].pct_matdeaths_safeabs += rawData[item].pct_matdeaths_safeabs,
						pct_matdeaths_unsafeabs: barData[key].pct_matdeaths_unsafeabs += rawData[item].pct_matdeaths_unsafeabs,
					};
				} else{
					barData[key] = {
						geo: key,
						country: rawData[item].category,
						leastsafe_abortions: rawData[item].leastsafe_abortions,
						lesssafe_abortions: rawData[item].lesssafe_abortions,
						safe_abortions: rawData[item].safe_abortions,
						value: rawData[item].value,

						pct_matdeaths_abortions: rawData[item].pct_matdeaths_abortions,
						pct_matdeaths_safeabs: rawData[item].pct_matdeaths_safeabs,
						pct_matdeaths_unsafeabs: rawData[item].pct_matdeaths_unsafeabs,
					};
				}

				let w_item = {
					name: rawData[item].country,
					value: rawData[item].pct_matdeaths_abortions
				};

				worldValues.push(w_item);
			}
	  	}

		let worldData = [];
		for( key in w_cols ){
			let total_value = 0;
			for( item in barData ){
				total_value += barData[item][w_cols[key]];
			}
			worldData[key] = {
				label: w_cols_labels[key],
				value: total_value,
				col: w_cols[key]
			}
		}

	const xScale = d3.scaleBand()
		.domain(worldData.map(d => d.label))
        .range([50, 300])
	    .padding(0.2);

    const yScale = d3.scaleLinear()
	    .domain([0, d3.max(worldData, d => d.value)])
	    .range([height - margins.bottom, margins.top]);

    const t = d3.transition().duration(1000);

    bar = bar
	    .data(worldData, d => d.geo)
	    .join(
	    	enter => enter.append('rect')
	    	.attr("class", 'bar_item')
			.attr("x", d => xScale(d.label))
			.attr("y", d => yScale(d.value))
			.attr("height", 0)
			.attr("width", 50)
			.attr("fill", d => colors(d.label))
	    	.call(enter => enter.transition(t)
	    	.attr("height", d => yScale(0) - yScale(d.value))),
	    	update => update.transition(t)
	    	.attr("x", d => xScale(d.label))
			.attr("y", d => yScale(d.value))
	    	.attr("height", d => yScale(0) - yScale(d.value))
	    	.attr("width", 50),
	    	exit => exit.transition(t)
	    	.attr("y", yScale(0))
	    	.attr("height", 0)
        .remove()
	    );

	// Add the tooltip when hover on the bar
	bar.append('title').text(d => Math.round(d.value));
	bar.on("mouseover", function(d) {
		d3.select(this).style("fill", '#d6b312');
	});
	
	// Add the mouseout event listener
	bar.on("mouseout", function(d) {
		d3.select(this).style("fill", d.groupData);
	});

    const yAxis = d3.axisLeft(yScale)

    yGroup.transition(t)
	    .call(yAxis)
	    .selection()
	    .call(g => g.select(".domain"));
    }
  });

  	const labelArc = d3.arc()
    	.outerRadius(radius + 40) // increase the distance of the label from the center
    	.innerRadius(radius + 50);

  	const total = d3.sum(groupData, d => d[1]);

	const labels = svg.selectAll('.label')
		.data(pie(groupData))
		.enter()
		.append('text')
		.attr('class', 'label')
		.attr('transform', d => `translate(${labelArc.centroid(d)})`)
		.attr('dy', -10)  // move the labels downward
		.style('text-anchor', 'middle')
    .style('font-size', '16px')
    .append("tspan")
    .text(d => d.data[0])
    .attr("x",-5)
    .attr("dy","0em")
    .append("tspan")
    .text(d => d3.format('.1%')(d.data[1] / total))
    .attr("x",-5)
    .attr("dy","1.2em");

	const countries = Array.from(new Set(worldData.map(d => d.label))).sort();
  
	const colors = d3.scaleOrdinal()
		.domain(countries)
		.range(['#a5b783', '#619ee1', '#4451ba']);

	const barChart = d3.select('#bar-chart')
		.append("svg")
    	.attr("viewBox", [0, 0, width, height-20]);

	const xScale = d3.scaleBand()
		.domain(worldData.map(d => d.label))
		.range([50, 300])
		.padding(0.2);

	const yScale = d3.scaleLinear()
		.domain([0, d3.max(worldData, d => d.value)])
		.range([height - margins.bottom, margins.top]);

	let bar = barChart.append("g")
		.selectAll("rect")
		// TODO: Add geo as id to refer to the data point
		.data(worldData, d => d.geo)
		.join("rect")
		// TODO: Add geo as the class
		// .attr("class", d => d.geo)
		.attr("class", 'bar_item')
		.attr("x", d => xScale(d.label))
		.attr("y", d => yScale(d.value))
		.attr("height", d => yScale(0) - yScale(d.value))
		.attr("width", 50)
		.attr("fill", d => colors(d.label));

	// Add the tooltip when hover on the bar
	bar.append('title').text(d => Math.round(d.value));

	bar.on("mouseover", function(d) {
		d3.select(this).style("fill", '#d6b312');
	});

	// Add the mouseout event listener
	bar.on("mouseout", function(d) {
		d3.select(this).style("fill", d.groupData);
	});
  // Create the x and y axes and append them to the chart
	const yAxis = d3.axisLeft(yScale);

	const yGroup = barChart.append("g")
		.attr("transform", `translate(45,0)`)
		.call(yAxis)
		.call(g => g.select(".domain"));

	const xAxis = d3.axisBottom(xScale);

	const xGroup = barChart.append("g")
		.attr("transform", `translate(${-5},${height - margins.bottom})`)
		.call(xAxis);

	xGroup.selectAll("text")
		.style("text-anchor", "end")
		.attr("dx", "-5")
    	.attr("dy", "25")
    	.attr("transform", "rotate(-45)").attr("y", -10);


  	///Create second bar chart
	let pct_cols = ['pct_matdeaths_abortions', 'pct_matdeaths_safeabs', 'pct_matdeaths_unsafeabs'];
	let pctData = [];
	
	for( item in barData ){
		for( key in pct_cols ){
			let pctItem = {
				region: barData[item].geo,
				column: pct_cols[key],
				value: barData[item][pct_cols[key]],
			};
			pctData.push(pctItem);
		}
	}
	
	const pctColor = d3.scaleOrdinal()
		.domain(['#F1894D', '#1EAC51', '#2077C0'])
		.range(['#F1894D', '#1EAC51', '#2077C0'])
	
	const groupBarChart = d3.select('#groupBar')
		.append("svg")
		.attr("viewBox", [0, 0, width+100, height]);
	
	const gxScale = d3.scaleBand()
		.domain(pctData.map(d => d.region))
		.range([margins.left, width - margins.right])
		.padding(0.09);
	
	const gxzScale = d3.scaleBand()
		.domain(pctData.map(d => d.column))
		.range([90, 160])
		.padding(0.1);
	
	const gyScale = d3.scaleLinear()
		.domain([0, d3.max(pctData, d => d.value)])
		.range([height - margins.bottom, margins.top]);
	
	let gbar = groupBarChart.append("g")
		.selectAll("rect")
		.data(pctData)
		.join("rect")
			.attr('class', d => d.region)
			.attr("x", d => gxScale(d.region)-50 + gxzScale(d.column)-10)
			.attr("y", d => gyScale(d.value))
			.attr("height", d => gyScale(0) - gyScale(d.value))
			.attr("width", 20)
			.attr('fill', (d, i) => pctColor(i));
	
	gbar.append('title').text(d => d.label);
	
	const gyAxis = d3.axisLeft(gyScale);
	
	const gyGroup = groupBarChart.append("g")
		.attr("transform", `translate(45,0)`)
		.call(gyAxis)
		.call(g => g.select(".domain"));
	
	const gxAxis = d3.axisBottom(gxScale);
	
	const gxGroup = groupBarChart.append("g")
		.attr("transform", `translate(${margins.left+5},${height - margins.bottom})`)
		.call(gxAxis);
	
	gxGroup.selectAll("text")
		.style("text-anchor", "end")
		.attr("dx", "10")
		.attr("dy", "10");
});

  